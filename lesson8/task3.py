#3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.

#Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
#Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class Stroka(Exception):
    def __init__(self, stroka):
        self.stroka = stroka
    def __str__(self):
        return (f"Была введена строка {self.stroka} - тип {str(type(self.stroka))}")

def list(my_list: list):
    a = input("Введите число (прекратить ввод - введите 987): ")
    try:
        if a.isdigit() == False:
            raise Stroka(a)
        my_list.append(int(a))
    except Stroka as error:
        print (error)
    else:
        print ("Отлично, продолжаем.")

my_list = []

while True:
    try:
        list(my_list)
    except Stroka as exception:
        print(exception)
    if my_list.count(int(987)) > 0:
        my_list.pop()
        print (f"Были введены числа: {my_list}")
        break
